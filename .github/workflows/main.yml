name: Build and Deploy iOS App

on:
  push:
    branches:
      - main

jobs:
  # Add secrets
  add_secrets:
    runs-on: macos-latest
    
    steps:
      - name: Add GitHub Secrets 1
        env:
          GH_TOKEN: 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
          SECRET_VALUE: $APP_STORE_CONNECT_API_KEY_KEY_ID
        run: |
          gh secret set APP_STORE_CONNECT_API_KEY_KEY_ID -b "$SECRET_VALUE" -R $GITHUB_REPOSITORY 
      
      - name: Add GitHub Secrets 2
        env:
          GH_TOKEN: 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
          SECRET_VALUE: $APP_STORE_CONNECT_API_KEY_ISSUER_ID
        run: | 
          gh secret set APP_STORE_CONNECT_API_KEY_ISSUER_ID -b "$SECRET_VALUE" -R $GITHUB_REPOSITORY
      
      - name: Add GitHub Secrets 3
        env:
          GH_TOKEN: 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
          SECRET_VALUE: $APP_STORE_CONNECT_P8_BASE64
        run: |
          gh secret set APP_STORE_CONNECT_P8_BASE64 -b "$SECRET_VALUE" -R $GITHUB_REPOSITORY 
      
      - name: Add GitHub Secrets 4
        env:
          GH_TOKEN: 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
          SECRET_VALUE: $FASTLANE_USER
        run: |
          gh secret set FASTLANE_USER -b "$SECRET_VALUE" -R $GITHUB_REPOSITORY
      
      - name: Add GitHub Secrets 5
        env:
          GH_TOKEN: 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
          SECRET_VALUE: $FASTLANE_PASSWORD
        run: |
          gh secret set FASTLANE_PASSWORD -b "$SECRET_VALUE" -R $GITHUB_REPOSITORY 
      
      - name: Add GitHub Secrets 5
        env:
          GH_TOKEN: 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
          SECRET_VALUE: $FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD
        run: |
          gh secret set FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD -b "$SECRET_VALUE" -R $GITHUB_REPOSITORY 
      
      - name: Add GitHub Secrets 6
        env:
          GH_TOKEN: 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
          SECRET_VALUE: $APPLE_TEAM_ID
        run: |
          gh secret set APPLE_TEAM_ID -b "$SECRET_VALUE" -R $GITHUB_REPOSITORY
      
      - name: Add GitHub Secrets 7
        env:
          GH_TOKEN: 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
          SECRET_VALUE: $EXPO_USERNAME
        run: |
          gh secret set EXPO_USERNAME -b "$SECRET_VALUE" -R $GITHUB_REPOSITORY
  
      - name: Add GitHub Secrets 8
        env:
          GH_TOKEN: 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
          SECRET_VALUE: $EXPO_PASSWORD
        run: |
          gh secret set EXPO_PASSWORD -b "$SECRET_VALUE" -R $GITHUB_REPOSITORY
      
      - name: Add GitHub Secrets 9
        env:
          GH_TOKEN: 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
          SECRET_VALUE: $MATCH_GIT_TOKEN
        run: |
          gh secret set MATCH_GIT_TOKEN -b "$SECRET_VALUE" -R $GITHUB_REPOSITORY
         
      - name: Add GitHub Secrets 9
        env:
          GH_TOKEN: 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
          SECRET_VALUE: $MATCH_PASSWORD
        run: |
          gh secret set MATCH_PASSWORD -b "$SECRET_VALUE" -R $GITHUB_REPOSITORY
                 
      - name: Add GitHub Secrets 9
        env:
          GH_TOKEN: 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
          SECRET_VALUE: false
        run: |
          gh secret set APP_CREATED -b "$SECRET_VALUE" -R $GITHUB_REPOSITORY

  build:
    runs-on: macos-latest

    steps:
      # Step 1: Check out the code from the repository
      - name: Checkout code
        uses: actions/checkout@v2

      # Step 2: Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          registry-url: https://registry.npmjs.org

      # Step 3: Configure npm to use GitHub token for private packages
      - name: Configure npm to use GitHub token
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }} # GitHub token from secrets
        run: |
          echo "@dhuntleypro:registry=https://npm.pkg.github.com/" > ~/.npmrc
          echo "//npm.pkg.github.com/:_authToken=${{ secrets.GH_TOKEN }}" >> ~/.npmrc

      # Step 4: Install project dependencies
      - name: Install dependencies 
        run: npm install

      # Step 5: Install EAS CLI (if using Expo and EAS)
      - name: Install EAS CLI
        run: npm install -g eas-cli

      # Step 6: Install Fastlane
      - name: Install Fastlane
        run: gem install fastlane

      # Step 7: Check if the app has already been created (via GitHub secret)
      - name: Check if App is Created
        id: check_app_created
        run: |
          if [ "${{ secrets.APP_CREATED }}" == "true" ]; then
            echo "App already created."
            echo "APP_EXISTS=true" >> $GITHUB_ENV
          else
            echo "App not created."
            echo "APP_EXISTS=false" >> $GITHUB_ENV
          fi

      # Step 8: Create App if not already created
      - name: Create App (if necessary)
        if: env.APP_EXISTS == 'false'
        run: |
          bundle exec fastlane produce --app_identifier ${APP_IDENTIFIER}
          gh secret set APP_CREATED -b "true" -R ${{ github.repository }}
        env:
          FASTLANE_USER: ${{ secrets.FASTLANE_USER }}
          FASTLANE_PASSWORD: ${{ secrets.FASTLANE_PASSWORD }}
          APP_IDENTIFIER: ${{ secrets.APP_IDENTIFIER }}

      # Step 9: Match Code Signing with Fastlane
      - name: Match Code Signing with Fastlane
        run: bundle exec fastlane match appstore
        env:
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
          GIT_URL: https://github.com/dhuntleypro/fastlane-match-repo.git
          FASTLANE_USER: ${{ secrets.FASTLANE_USER }}
          FASTLANE_PASSWORD: ${{ secrets.FASTLANE_PASSWORD }}

      # Step 10: Build the iOS app
      - name: Build iOS App
        run: bundle exec fastlane gym --scheme baseexpoapp
        env:
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}

      # Step 11: Upload the app to App Store Connect
      - name: Upload to App Store Connect
        run: bundle exec fastlane upload_to_app_store
        env:
          FASTLANE_USER: ${{ secrets.FASTLANE_USER }}
          FASTLANE_PASSWORD: ${{ secrets.FASTLANE_PASSWORD }}
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}

      # Step 12: Deploy using Fastlane (Optional)
      - name: Deploy All with Fastlane
        run: bundle exec fastlane deploy_all --verbose
        env:
          FASTLANE_USER: ${{ secrets.FASTLANE_USER }}
          FASTLANE_PASSWORD: ${{ secrets.FASTLANE_PASSWORD }}
          MATCH_GIT_TOKEN: ${{ secrets.MATCH_GIT_TOKEN }}
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}

  # build:
  #   runs-on: macos-latest

  #   steps:
  #   # Step 1: Check out the code from the repository
  #     - name: Checkout code
  #       uses: actions/checkout@v2

  #     # Step 2: Set up Node.js
  #     - name: Set up Node.js
  #       uses: actions/setup-node@v3
  #       with:
  #         node-version: '16'
  #         registry-url: https://registry.npmjs.org

  #     # Step 3: Configure npm to use GitHub token for private packages
  #     - name: Configure npm to use GitHub token
  #       env:
  #         GH_TOKEN: ${{ secrets.GH_TOKEN }} # GitHub token from secrets
  #       run: |
  #         echo "@dhuntleypro:registry=https://npm.pkg.github.com/" > ~/.npmrc
  #         echo "//npm.pkg.github.com/:_authToken=${{ secrets.GH_TOKEN }}" >> ~/.npmrc

  #     # Step 4: Install project dependencies
  #     - name: Install dependencies 
  #       run: npm install

  #     # Step 5: Install EAS CLI (if using Expo and EAS)
  #     - name: Install EAS CLI
  #       run: npm install -g eas-cli

  #     # Step 6: Install Fastlane and set up Ruby environment
  #     - name: Install Fastlane
  #       run: |
  #         gem install bundler
  #         bundle update --bundler
  #         bundle install

  #     # Step 7: Check if the app already exists in App Store Connect
  #     - name: Check if App Exists
  #       id: check_app
  #       run: |
  #         if fastlane produce --app_identifier com.dhuntleyinc.baseexpoapp -q; then
  #           echo "App already exists"
  #           echo "APP_EXISTS=true" >> $GITHUB_ENV
  #         else
  #           echo "App does not exist, creating..."
  #           echo "APP_EXISTS=false" >> $GITHUB_ENV
  #         fi
  #       env:
  #         FASTLANE_USER: ${{ secrets.FASTLANE_USER }}
  #         FASTLANE_PASSWORD: ${{ secrets.FASTLANE_PASSWORD }}

  #     # Step 8: Create App (if necessary)
  #     - name: Create App (if necessary)
  #       if: env.APP_EXISTS == 'false'
  #       run: fastlane produce
  #       env:
  #         FASTLANE_USER: ${{ secrets.FASTLANE_USER }}
  #         FASTLANE_PASSWORD: ${{ secrets.FASTLANE_PASSWORD }}
  #         APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}

  #     # Step 9: Match Code Signing with Fastlane
  #     - name: Match Code Signing with Fastlane
  #       run: fastlane match appstore
  #       env:
  #         MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
  #         GIT_URL: https://github.com/dhuntleypro/fastlane-match-repo.git
  #         FASTLANE_USER: ${{ secrets.FASTLANE_USER }}
  #         FASTLANE_PASSWORD: ${{ secrets.FASTLANE_PASSWORD }}

  #     # Step 10: Build the iOS app
  #     - name: Build iOS App
  #       run: fastlane gym --scheme baseexpoapp
  #       env:
  #         MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}

  #     # Step 11: Upload the app to App Store Connect
  #     - name: Upload to App Store Connect
  #       run: fastlane upload_to_app_store
  #       env:
  #         FASTLANE_USER: ${{ secrets.FASTLANE_USER }}
  #         FASTLANE_PASSWORD: ${{ secrets.FASTLANE_PASSWORD }}
  #         MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}

  #     # Step 12: Deploy using Fastlane (Optional)
  #     - name: Deploy All with Fastlane
  #       run: fastlane deploy_all --verbose
  #       env:
  #         FASTLANE_USER: ${{ secrets.FASTLANE_USER }}
  #         FASTLANE_PASSWORD: ${{ secrets.FASTLANE_PASSWORD }}
  #         MATCH_GIT_TOKEN: ${{ secrets.MATCH_GIT_TOKEN }}
  #         MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
  #         APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}



  # build:
  #   runs-on: macos-latest

  #   steps:
  #   # Step 1: Check out the code from the repository
  #   - name: Checkout code
  #     uses: actions/checkout@v2

  #   # Step 2: Set up Node.js
  #   - name: Set up Node.js
  #     uses: actions/setup-node@v3
  #     with:
  #       node-version: '16'
  #       registry-url: https://registry.npmjs.org

  #   # Step 3: Configure npm to use the GitHub token for private packages (optional)
  #   - name: Configure npm to use GitHub token
  #     env:
  #       GH_TOKEN: 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 # Use secret GitHub token
  #     run: |
  #       echo "@dhuntleypro:registry=https://npm.pkg.github.com/" > ~/.npmrc
  #       echo "//npm.pkg.github.com/:_authToken=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" >> ~/.npmrc

  #   # Step 4: Install project dependencies
  #   - name: Install dependencies 
  #     run: npm install
  #     env:
  #       GH_TOKEN: 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
  #       GIT_TOKEN: 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

  #   # Step 5: Install EAS CLI (if you are using Expo and EAS)
  #   - name: Install EAS CLI
  #     run: npm install -g eas-cli

  #   # Step 6: Install Fastlane and set up the Ruby environment
  #   - name: Install Fastlane
  #     run: |
  #       gem install bundler
  #       bundle update --bundler
  #       bundle install

  #       - name: Match Code Signing with Fastlane
  #       run: fastlane match appstore
  #       env:
  #         MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
  #         GIT_URL: https://github.com/dhuntleypro/fastlane-match-repo.git
  #         FASTLANE_USER: ${{ secrets.FASTLANE_USER }}
  #         FASTLANE_PASSWORD: ${{ secrets.FASTLANE_PASSWORD }}
  
  #     - name: Build iOS App
  #       run: fastlane gym --scheme baseexpoapp
  #       env:
  #         MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
  
  #     - name: Upload to App Store Connect
  #       run: fastlane upload_to_app_store
  #       env:
  #         MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
  #         FASTLANE_USER: ${{ secrets.FASTLANE_USER }}
  #         FASTLANE_PASSWORD: ${{ secrets.FASTLANE_PASSWORD }}
  #   # Step 7: Run Fastlane to build and deploy the app
  #   - name: Run Fastlane deploy
  #     run: fastlane deploy_all --verbose
  #     env:
  #       FASTLANE_USER: ${{ secrets.FASTLANE_USER }}
  #       FASTLANE_PASSWORD: ${{ secrets.FASTLANE_PASSWORD }}
  #       MATCH_GIT_TOKEN: ${{ secrets.MATCH_GIT_TOKEN }}
  #       MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
  #       APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}

















# name: CI Workflow

# on:
#   push:
#     branches:
#       - main

# jobs:
#   # Add secrets
#   add_secrets:
#     runs-on: macos-latest
    
#     steps:
#       - name: Add GitHub Secrets 1
#         env:
#           GH_TOKEN: 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
#           SECRET_VALUE: $APP_STORE_CONNECT_API_KEY_KEY_ID
#         run: |
#           gh secret set APP_STORE_CONNECT_API_KEY_KEY_ID -b "$SECRET_VALUE" -R $GITHUB_REPOSITORY 
      
#       - name: Add GitHub Secrets 2
#         env:
#           GH_TOKEN: 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
#           SECRET_VALUE: $APP_STORE_CONNECT_API_KEY_ISSUER_ID
#         run: | 
#           gh secret set APP_STORE_CONNECT_API_KEY_ISSUER_ID -b "$SECRET_VALUE" -R $GITHUB_REPOSITORY
      
#       - name: Add GitHub Secrets 3
#         env:
#           GH_TOKEN: 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
#           SECRET_VALUE: $APP_STORE_CONNECT_P8_BASE64
#         run: |
#           gh secret set APP_STORE_CONNECT_P8_BASE64 -b "$SECRET_VALUE" -R $GITHUB_REPOSITORY 
      
#       - name: Add GitHub Secrets 4
#         env:
#           GH_TOKEN: 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
#           SECRET_VALUE: $FASTLANE_USER
#         run: |
#           gh secret set FASTLANE_USER -b "$SECRET_VALUE" -R $GITHUB_REPOSITORY
      
#       - name: Add GitHub Secrets 5
#         env:
#           GH_TOKEN: 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
#           SECRET_VALUE: $FASTLANE_PASSWORD
#         run: |
#           gh secret set FASTLANE_PASSWORD -b "$SECRET_VALUE" -R $GITHUB_REPOSITORY 
      
#       - name: Add GitHub Secrets 6
#         env:
#           GH_TOKEN: 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
#           SECRET_VALUE: $APPLE_TEAM_ID
#         run: |
#           gh secret set APPLE_TEAM_ID -b "$SECRET_VALUE" -R $GITHUB_REPOSITORY
   

#   # First Job: Setup
#   setup:
#     runs-on: macos-latest
#     needs: add_secrets
#     steps:
#       # Checkout the repository
#       - uses: actions/checkout@v2

#       # Set up Node.js
#       - uses: actions/setup-node@v2
#         with:
#           node-version: '18.17'

#       - name: Install npm dependencies
#         run: npm install

#       - name: Install GitHub CLI if necessary
#         run: |
#           brew install gh
        
#       - name: Install OpenSSL if necessary
#         run: |
#           brew info openssl

#   # Check Environment Variables
#   check_env:
#     runs-on: macos-latest
#     needs: setup
#     steps:
#       - name: Check required environment variables
#         run: |
#           REQUIRED_VARS=("FASTLANE_USER" "MATCH_PASSWORD" "MATCH_GIT_TOKEN" "APPLE_TEAM_ID" "APP_STORE_CONNECT_API_KEY_KEY_ID" "APP_STORE_CONNECT_API_KEY_ISSUER_ID")
#           for VAR in "${REQUIRED_VARS[@]}"; do
#             if [ -z "${!VAR}" ]; then
#               echo "Error: Environment variable $VAR is not set."
#               exit 1
#             else
#               echo "Environment variable $VAR is set."
#             fi
#           done
#         env:
#           FASTLANE_USER: ${{ secrets.FASTLANE_USER }}
#           MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
#           MATCH_GIT_TOKEN: ${{ secrets.MATCH_GIT_TOKEN }}
#           APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
#           APP_STORE_CONNECT_API_KEY_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_KEY_ID }}
#           APP_STORE_CONNECT_API_KEY_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ISSUER_ID }}

#   # Second Job: Deployment depends on Setup
#   deploy:
#     runs-on: macos-latest
#     needs: check_env  # This ensures that 'deploy' runs only after 'setup' is complete.
#     steps:
#       - uses: actions/checkout@v2  # This line was incorrectly indented
#       - name: Decode App Store Connect p8 key
#         run: echo "${{ secrets.APP_STORE_CONNECT_P8_BASE64 }}" | base64 --decode > ApiKey_HVI5YC18WLLM.p8
#       - name: Set Permissions on p8 File
#         run: chmod 600 ApiKey_HVI5YC18WLLM.p8

#       - name: Debug Environment Variables
#         run: |
#           echo "Key ID: ${APP_STORE_CONNECT_API_KEY_KEY_ID}"
#           echo "Issuer ID: ${APP_STORE_CONNECT_ISSUER_ID}"
#           echo "Length Key ID: ${#APP_STORE_CONNECT_API_KEY_KEY_ID}"
#           echo "Length Issuer ID: ${#APP_STORE_CONNECT_ISSUER_ID}"
#         env:
#           APP_STORE_CONNECT_API_KEY_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_KEY_ID }}
#           APP_STORE_CONNECT_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}
            
#       - name: Install Bundler if necessary
#         run: |
#           if ! gem list bundler -i > /dev/null; then
#             gem install bundler
#           fi

#       - name: Check and update Fastlane
#         run: |
#           if ! gem list fastlane -i > /dev/null; then
#             gem install fastlane
#           else
#             gem update fastlane
#           fi

#       - name: Run Fastlane to deploy
#         env:
#           FASTLANE_USER: ${{ secrets.FASTLANE_USER }}
#           FASTLANE_PASSWORD: ${{ secrets.FASTLANE_PASSWORD }}
#           MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
#           APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
#           APP_STORE_CONNECT_API_KEY_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_KEY_ID }}
#           APP_STORE_CONNECT_API_KEY_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ISSUER_ID }}
#           APP_STORE_CONNECT_P8_BASE64: ${{ secrets.APP_STORE_CONNECT_P8_BASE64 }}
#         run: |
#           fastlane client_deploy_production_app_store
#           fastlane client_deploy_production_beta
#           fastlane client_deploy_staging_beta



# # ios client_deploy_production_app_store, ios client_deploy_production_beta, ios client_deploy_staging_beta, ios desktop_deploy_appstore, ios run_all_tests, ios load_provision_profiles_ios_staging, ios load_provision_profiles_ios_production, ios create_provision_profiles_ios_staging, ios create_provision_profiles_ios_production, ios login_another_user, ios git_setup_user, ios git_commit_push, ios git_tag_push, ios version_increment_patch, mac create_provision_profiles_mac_production









#  - uses: actions/checkout@v2

#       # Set up Node.js environment
#       - name: Set up Node.js
#         uses: actions/setup-node@v2
#         with:
#           node-version: '18.17'

#       # Install npm dependencies
#       - name: Install npm dependencies
#         run: npm install

#       # Install GitHub CLI
#       - name: Install GitHub CLI
#         run: |
#           brew install gh
#           brew update
#           brew upgrade openssl











# name: CI Workflow

# on:
#   push:
#     branches:
#       - main

# jobs:

#   # Add secrets
#   add_secrets:
#     runs-on: macos-latest
    
#     steps:
#       - name: Add GitHub Secrets 1
#         env:
#           GH_TOKEN: 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
#           SECRET_VALUE: $APP_STORE_CONNECT_API_KEY_KEY_ID
#         run: |
#           gh secret set APP_STORE_CONNECT_API_KEY_KEY_ID -b "$SECRET_VALUE" -R $GITHUB_REPOSITORY 
      
#       - name: Add GitHub Secrets 2
#         env:
#           GH_TOKEN: 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
#           SECRET_VALUE: $APP_STORE_CONNECT_API_KEY_ISSUER_ID
#         run: | 
#           gh secret set APP_STORE_CONNECT_API_KEY_ISSUER_ID -b "$SECRET_VALUE" -R $GITHUB_REPOSITORY
      
#       - name: Add GitHub Secrets 3
#         env:
#           GH_TOKEN: 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
#           SECRET_VALUE: $APP_STORE_CONNECT_P8_BASE64
#         run: |
#           gh secret set APP_STORE_CONNECT_P8_BASE64 -b "$SECRET_VALUE" -R $GITHUB_REPOSITORY 
      
#       - name: Add GitHub Secrets 4
#         env:
#           GH_TOKEN: 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
#           SECRET_VALUE: $FASTLANE_USER
#         run: |
#           gh secret set FASTLANE_USER -b "$SECRET_VALUE" -R $GITHUB_REPOSITORY
      
#       - name: Add GitHub Secrets 5
#         env:
#           GH_TOKEN: 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
#           SECRET_VALUE: $FASTLANE_PASSWORD
#         run: |
#           gh secret set FASTLANE_PASSWORD -b "$SECRET_VALUE" -R $GITHUB_REPOSITORY 
      
#       - name: Add GitHub Secrets 6
#         env:
#           GH_TOKEN: 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
#           SECRET_VALUE: $APPLE_TEAM_ID
#         run: |
#           gh secret set APPLE_TEAM_ID -b "$SECRET_VALUE" -R $GITHUB_REPOSITORY

#   # First Job: Setup
#   setup:
#     runs-on: macos-latest
#     needs: add_secrets
#       steps:
#       # Checkout the repository
#       - uses: actions/checkout@v2

#       # Set up Node.js environment
#       - name: Set up Node.js
#         uses: actions/setup-node@v2
#         with:
#           node-version: '18.17'

#       # Install npm dependencies
#       - name: Install npm dependencies
#         run: npm install

#       # Install GitHub CLI
#       - name: Install GitHub CLI
#         run: brew install gh
  
#   # Check
#   check_env:
#       runs-on: macos-latest
#       needs: setup
#       steps:
#         - name: Check required environment variables
#           run: |
#             REQUIRED_VARS=("FASTLANE_USER" "MATCH_PASSWORD" "MATCH_GIT_TOKEN" "APPLE_TEAM_ID" "APP_STORE_CONNECT_API_KEY_KEY_ID" "APP_STORE_CONNECT_API_KEY_ISSUER_ID")
#             for VAR in "${REQUIRED_VARS[@]}"; do
#               if [ -z "${!VAR}" ]; then
#                 echo "Error: Environment variable $VAR is not set."
#                 exit 1
#               else
#                 echo "Environment variable $VAR is set."
#               fi
#             done
#           env:
#             FASTLANE_USER: ${{ secrets.FASTLANE_USER }}
#             MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
#             MATCH_GIT_TOKEN: ${{ secrets.MATCH_GIT_TOKEN }}
#             APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
#             APP_STORE_CONNECT_API_KEY_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_KEY_ID }}
#             APP_STORE_CONNECT_API_KEY_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ISSUER_ID }}

#   # Second Job: Deployment depends on Setup
#   deploy:
#     runs-on: macos-latest
#     needs: check_env  # This ensures that 'deploy' runs only after 'setup' is complete.
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v2

#       - name: Decode App Store Connect p8 key
#         run: |
#           echo "${{ secrets.APP_STORE_CONNECT_P8_BASE64 }}" | base64 --decode > ApiKey_HVI5YC18WLLM.p8

#       - name: Install Bundler
#         run: gem install bundler

#       - name: Install gems
#         run: bundle install

#       - name: Run Fastlane to deploy
#         env:
#           FASTLANE_USER: ${{ secrets.FASTLANE_USER }}
#           FASTLANE_PASSWORD: ${{ secrets.FASTLANE_PASSWORD }}
#           MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
#           APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
#           APP_STORE_CONNECT_API_KEY_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_KEY_ID }}
#           APP_STORE_CONNECT_API_KEY_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ISSUER_ID }}
#           APP_STORE_CONNECT_P8_BASE64: ${{ secrets.APP_STORE_CONNECT_P8_BASE64 }}
#         run: |
#           bundle exec fastlane beta





















# name: Deploy to TestFlight or App Store

# on:
#   push:
#     branches:
#       - main  # Run this action on push to the main branch

# jobs:
#   build:
#     runs-on: macos-latest

#     steps:
#       # Checkout the repository
#       - uses: actions/checkout@v2

#       # Set up Node.js environment (if required for your project)
#       - name: Set up Node.js
#         uses: actions/setup-node@v2
#         with:
#           node-version: '18.17'

#       # Install npm dependencies (if required for your project)
#       - name: Install npm dependencies
#         run: npm install

#       # Install GitHub CLI
#       - name: Install GitHub CLI
#         run: brew install gh
    
#       # # Decode the p8 key from GitHub Secret
#       # - name: Decode the App Store Connect .p8 key
#       #   run: |
#       #     echo "${{ secrets.APP_STORE_P8_KEY_BASE64 }}" | base64 --decode > ApiKey_HVI5YC18WLLM.p8
           
#       # Add GitHub Secrets
     
#       # Check required environment variables
#       - name: Check required environment variables
#         run: |
#           REQUIRED_VARS=("FASTLANE_USER" "MATCH_PASSWORD" "MATCH_GIT_TOKEN" "APPLE_TEAM_ID" "APP_STORE_CONNECT_API_KEY_KEY_ID" "APP_STORE_CONNECT_API_KEY_ISSUER_ID")
#           for VAR in "${REQUIRED_VARS[@]}"; do
#             if [ -z "${!VAR}" ]; then
#               echo "Error: Environment variable $VAR is not set."
#               exit 1
#             else
#               echo "Environment variable $VAR is set."
#             fi
#           done
#         env:
#           FASTLANE_USER: ${{ secrets.FASTLANE_USER }}
#           MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
#           MATCH_GIT_TOKEN: ${{ secrets.MATCH_GIT_TOKEN }}
#           APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
#           APP_STORE_CONNECT_API_KEY_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_KEY_ID }}
#           APP_STORE_CONNECT_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}
      
#       # Authenticate and run Fastlane
#       - name: Run Fastlane to deploy
#         run: fastlane beta
#         env:
#           FASTLANE_USER: ${{ secrets.FASTLANE_USER }}
#           FASTLANE_PASSWORD: ${{ secrets.FASTLANE_PASSWORD }}
#           MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
#           APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
#           APP_STORE_CONNECT_API_KEY_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_KEY_ID }}
#           APP_STORE_CONNECT_API_KEY_ISSUER_ID : ${{ secrets.APP_STORE_CONNECT_API_KEY_ISSUER_ID }}
#           APP_STORE_CONNECT_P8_BASE64: ${{ secrets.APP_STORE_CONNECT_P8_BASE64 }}

#       # Optional: Post-deployment notification (e.g., Slack)
#       - name: Post Deployment Notification
#         if: success()
#         run: |
#           echo "Deployment to TestFlight or App Store successful!"






